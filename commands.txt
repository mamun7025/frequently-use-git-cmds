git update-git-for-windows

git branch -M main ----------> Use main branch instead of master

git checkout master ---------> move to master branch
git status ------------------> see current branch status
git pull origin master ------> synce local master branch with remote master
git pull origin master --autostash
git checkout almamun --------> move to local almamun branch
git merge master ------------> marge local almamun branch with local master branch


git stash ------> apply it or apply force checkout
git stash ------> To discard all local changes, but save them for later:
git checkout almamun -f

git mergetool


git log --pretty=format: --name-only --since="2 days ago" | sort | uniq


git checkout -b my-branch-name ----------> create new branch with name my-branch-name
git checkout my-branch-name -------------> move to local branch name: my-branch-name

$ git checkout -b branchB ---------------> create new branch with name: branchB
$ git push origin branchB:branchB -------> push local branch: branchB to remote branch: branchB ( if not exist then create )
$ git push origin master ----------------> push local master branch to remote master branch



$ git init
$ git add README.md

$ git add . ------------------------> root folder
$ git add -A -----------------------> add all files
$ git add file-1 file-2 file-3
$ git commit -m "first commit"
$ git remote add origin https://github.com/mamun7025/spring-security-full-with-thymeleaf-gp.git
$ git push origin master




git pull origin branchname --allow-unrelated-histories
git mergetool
git checkout -f master


------------ Git Track Remote ---------------------
which local branch is tracking which remote branch in Git?
git remote show origin
For all branches: git branch -avv
For local branches only: git branch -lvv
For remote branches only: git branch -rvv

-------------- How can I tell a local branch to track a remote branch
git checkout --track origin/dev
Branch dev set up to track remote branch dev from origin.
Switched to a new branch 'dev'

git remote prune
git remote prune origin


-----------------------
It's very simple. You just go to one branch (e.g. main is your branch).
Run the command
git checkout main
git diff branch2
// OR
git diff b1...b2
--------------
git diff with Double Dot Notation
git diff main..feature/login
git log main..feature/login
git log --oneline main..feature/login
 git diff main..feature/login index.html
 https://www.git-tower.com/learn/git/faq/git-compare-two-branches

git log -9
git diff 86de235419449f317871e3d97a44ae0ae0fc8d1d wallet-management/src/main/java/com/moneycore/controller/WalletManagementController.java

====================================================================================================================================
…or create a new repository on the command line
echo "# chkTestRepo" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/mamun7025/chkTestRepo.git
git push -u origin main

…or push an existing repository from the command line
git remote add origin https://github.com/mamun7025/chkTestRepo.git
git branch -M main
git push -u origin main



=========================================================================================
git remote rm origin
git remote add origin git@github.com:username/myapp.git


git remote -v ---------> You can see what remote repositories you are configured to connect to via

==========================================================================================
Add All Files using Git Add
The easiest way to add all files to your Git repository is to use the “git add” command followed by the “-A” option for “all”.

$ git add -A                       

$ git add .                        (at the root of your project folder)



===========================================================================================
git config --global user.name "mamun7025"
git config --global user.email "mamun7025@gmail.com"





============================================================================================
git reset --hard origin/master
git pull origin master




=========== Git clone specific branch =========================
git clone https://github.com/karan1122551/full-stack-project.git
git branch -a
git checkout implementation


========================= My .gitignore file is ignored by git and it does not work
============ Applied ===========================================
git rm --cached <file>
git rm -r --cached <folder>

git rm --cached .gitignore
git add .gitignore

git rm -r --cached food-craft/foodcraft-backend/target
================================================================


git rm -r --cached .;
git add .;
git commit -m "Untracked files issue resolved to fix .gitignore";

----------------------
# remove specific file from git cache
git rm --cached filename

# remove all files from git cache
git rm -r --cached .
git add .
git commit -m ".gitignore is now working"
https://gist.github.com/ainsofs/2b80771a5582b7528d9e

git rm --cached .idea/compiler.xml
git rm --cached .idea/encodings.xml
git rm --cached .idea/misc.xml
git rm --cached .idea/workspace.xml
=====================================================================


===============================
// Clone / Push Code to GitHub using Personal Access Token Authentication
git clone https://username:pat@github.com/username/reponame.git
git clone https://mamun7025:ghp_XXXXXXXXXXXXXXXXYYYYYYYYYY@github.com/mamun7025/spring-boot-exception-handling.git
// update token
git remote set-url origin https://mamun7025:ghp_XXXXXXXXXXXXXXXXYYYYYYYYYY@github.com/mamun7025/spring-boot-exception-handling.git
